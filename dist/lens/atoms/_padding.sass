// Creates the style declarations for each border type and value
@mixin padding-style($suffix)

  // Iterate through each value in $spacing-sides
  @each $type, $side in $spacing-sides

    // We don't want a modifier on the padding for all sides,
    // so we need a conditional to control that
    @if $type == all

      // Iterate through each unit inside our $spacing map
      @each $unit, $value in $spacing
        @include suffixer($suffix, "%p-#{$unit}")
          padding: spacing($unit)

    @else

      // Iterate through each unit inside our $spacing map
      @each $unit, $value in $spacing

        // We need to control printing out two properties for
        // the lt and tb case and a single for the others
        @if $type == lr
          @include suffixer($suffix, "%p-#{$type}-#{$unit}")
            padding-left: spacing($unit)
            padding-right: spacing($unit)
        @else if $type == tb
          @include suffixer($suffix, "%p-#{$type}-#{$unit}")
            padding-top: spacing($unit)
            padding-bottom: spacing($unit)
        @else
          @include suffixer($suffix, "%p-#{$type}-#{$unit}")
            padding-#{$side}: spacing($unit)



// Adds the media queries to the padding-style mixin
@mixin padding($suffix, $media: null)

  // We want to use @media screen whenever no $media
  // is passed into the mixin
  @if length($media) == 2
    +media($media)
      +padding-style($suffix)
  @else
    @media screen
      +padding-style($suffix)


// Building classes

// Default
+padding(xs)

// Other breakpoints
@each $value, $breakpoint in $breakpoints
  +padding($value, min-width $breakpoint)
