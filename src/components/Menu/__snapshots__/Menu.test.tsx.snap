// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Menu - composed 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Menu>
    <Styled(Internal)>
      <Styled(wrapContext)
        icon="LogoRings"
      >
        Looker
      </Styled(wrapContext)>
      <Styled(wrapContext)
        icon="Validate"
      >
        Validate
      </Styled(wrapContext)>
      <Styled(wrapContext)
        icon="ChartPie"
      >
        Pizza!
      </Styled(wrapContext)>
    </Styled(Internal)>
    <Styled(Internal)
      canActivate={true}
      label="Cheeses"
    >
      <Styled(wrapContext)>
        Gouda
      </Styled(wrapContext)>
      <Styled(wrapContext)>
        Cheddar
      </Styled(wrapContext)>
      <Styled(wrapContext)>
        Swiss
      </Styled(wrapContext)>
    </Styled(Internal)>
    <Styled(Internal)>
      <Styled(wrapContext)
        icon="Beaker"
      >
        Scary Stuff
      </Styled(wrapContext)>
    </Styled(Internal)>
  </Menu>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Styled(Styled(Component))
        innerRef={
          Object {
            "current": null,
          }
        }
        tabIndex={-1}
        userSelect="none"
      >
        <Styled(Internal)>
          <Styled(wrapContext)
            icon="LogoRings"
          >
            Looker
          </Styled(wrapContext)>
          <Styled(wrapContext)
            icon="Validate"
          >
            Validate
          </Styled(wrapContext)>
          <Styled(wrapContext)
            icon="ChartPie"
          >
            Pizza!
          </Styled(wrapContext)>
        </Styled(Internal)>
        <Styled(Internal)
          canActivate={true}
          label="Cheeses"
        >
          <Styled(wrapContext)>
            Gouda
          </Styled(wrapContext)>
          <Styled(wrapContext)>
            Cheddar
          </Styled(wrapContext)>
          <Styled(wrapContext)>
            Swiss
          </Styled(wrapContext)>
        </Styled(Internal)>
        <Styled(Internal)>
          <Styled(wrapContext)
            icon="Beaker"
          >
            Scary Stuff
          </Styled(wrapContext)>
        </Styled(Internal)>
      </Styled(Styled(Component))>,
      "handlers": Object {
        "moveDown": [Function],
        "moveUp": [Function],
      },
      "keyMap": Object {
        "moveDown": "down",
        "moveUp": "up",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Internal)>
            <Styled(wrapContext)
              icon="LogoRings"
            >
              Looker
            </Styled(wrapContext)>
            <Styled(wrapContext)
              icon="Validate"
            >
              Validate
            </Styled(wrapContext)>
            <Styled(wrapContext)
              icon="ChartPie"
            >
              Pizza!
            </Styled(wrapContext)>
          </Styled(Internal)>,
          <Styled(Internal)
            canActivate={true}
            label="Cheeses"
          >
            <Styled(wrapContext)>
              Gouda
            </Styled(wrapContext)>
            <Styled(wrapContext)>
              Cheddar
            </Styled(wrapContext)>
            <Styled(wrapContext)>
              Swiss
            </Styled(wrapContext)>
          </Styled(Internal)>,
          <Styled(Internal)>
            <Styled(wrapContext)
              icon="Beaker"
            >
              Scary Stuff
            </Styled(wrapContext)>
          </Styled(Internal)>,
        ],
        "innerRef": Object {
          "current": null,
        },
        "tabIndex": -1,
        "userSelect": "none",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(wrapContext)
                icon="LogoRings"
              >
                Looker
              </Styled(wrapContext)>,
              <Styled(wrapContext)
                icon="Validate"
              >
                Validate
              </Styled(wrapContext)>,
              <Styled(wrapContext)
                icon="ChartPie"
              >
                Pizza!
              </Styled(wrapContext)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Looker",
                "icon": "LogoRings",
              },
              "ref": null,
              "rendered": "Looker",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Validate",
                "icon": "Validate",
              },
              "ref": null,
              "rendered": "Validate",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Pizza!",
                "icon": "ChartPie",
              },
              "ref": null,
              "rendered": "Pizza!",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "canActivate": true,
            "children": Array [
              <Styled(wrapContext)>
                Gouda
              </Styled(wrapContext)>,
              <Styled(wrapContext)>
                Cheddar
              </Styled(wrapContext)>,
              <Styled(wrapContext)>
                Swiss
              </Styled(wrapContext)>,
            ],
            "label": "Cheeses",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Gouda",
              },
              "ref": null,
              "rendered": "Gouda",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Cheddar",
              },
              "ref": null,
              "rendered": "Cheddar",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Swiss",
              },
              "ref": null,
              "rendered": "Swiss",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(wrapContext)
              icon="Beaker"
            >
              Scary Stuff
            </Styled(wrapContext)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Scary Stuff",
              "icon": "Beaker",
            },
            "ref": null,
            "rendered": "Scary Stuff",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(Styled(Component))
          innerRef={
            Object {
              "current": null,
            }
          }
          tabIndex={-1}
          userSelect="none"
        >
          <Styled(Internal)>
            <Styled(wrapContext)
              icon="LogoRings"
            >
              Looker
            </Styled(wrapContext)>
            <Styled(wrapContext)
              icon="Validate"
            >
              Validate
            </Styled(wrapContext)>
            <Styled(wrapContext)
              icon="ChartPie"
            >
              Pizza!
            </Styled(wrapContext)>
          </Styled(Internal)>
          <Styled(Internal)
            canActivate={true}
            label="Cheeses"
          >
            <Styled(wrapContext)>
              Gouda
            </Styled(wrapContext)>
            <Styled(wrapContext)>
              Cheddar
            </Styled(wrapContext)>
            <Styled(wrapContext)>
              Swiss
            </Styled(wrapContext)>
          </Styled(Internal)>
          <Styled(Internal)>
            <Styled(wrapContext)
              icon="Beaker"
            >
              Scary Stuff
            </Styled(wrapContext)>
          </Styled(Internal)>
        </Styled(Styled(Component))>,
        "handlers": Object {
          "moveDown": [Function],
          "moveUp": [Function],
        },
        "keyMap": Object {
          "moveDown": "down",
          "moveUp": "up",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Internal)>
              <Styled(wrapContext)
                icon="LogoRings"
              >
                Looker
              </Styled(wrapContext)>
              <Styled(wrapContext)
                icon="Validate"
              >
                Validate
              </Styled(wrapContext)>
              <Styled(wrapContext)
                icon="ChartPie"
              >
                Pizza!
              </Styled(wrapContext)>
            </Styled(Internal)>,
            <Styled(Internal)
              canActivate={true}
              label="Cheeses"
            >
              <Styled(wrapContext)>
                Gouda
              </Styled(wrapContext)>
              <Styled(wrapContext)>
                Cheddar
              </Styled(wrapContext)>
              <Styled(wrapContext)>
                Swiss
              </Styled(wrapContext)>
            </Styled(Internal)>,
            <Styled(Internal)>
              <Styled(wrapContext)
                icon="Beaker"
              >
                Scary Stuff
              </Styled(wrapContext)>
            </Styled(Internal)>,
          ],
          "innerRef": Object {
            "current": null,
          },
          "tabIndex": -1,
          "userSelect": "none",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Styled(wrapContext)
                  icon="LogoRings"
                >
                  Looker
                </Styled(wrapContext)>,
                <Styled(wrapContext)
                  icon="Validate"
                >
                  Validate
                </Styled(wrapContext)>,
                <Styled(wrapContext)
                  icon="ChartPie"
                >
                  Pizza!
                </Styled(wrapContext)>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Looker",
                  "icon": "LogoRings",
                },
                "ref": null,
                "rendered": "Looker",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Validate",
                  "icon": "Validate",
                },
                "ref": null,
                "rendered": "Validate",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Pizza!",
                  "icon": "ChartPie",
                },
                "ref": null,
                "rendered": "Pizza!",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "canActivate": true,
              "children": Array [
                <Styled(wrapContext)>
                  Gouda
                </Styled(wrapContext)>,
                <Styled(wrapContext)>
                  Cheddar
                </Styled(wrapContext)>,
                <Styled(wrapContext)>
                  Swiss
                </Styled(wrapContext)>,
              ],
              "label": "Cheeses",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Gouda",
                },
                "ref": null,
                "rendered": "Gouda",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Cheddar",
                },
                "ref": null,
                "rendered": "Cheddar",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Swiss",
                },
                "ref": null,
                "rendered": "Swiss",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(wrapContext)
                icon="Beaker"
              >
                Scary Stuff
              </Styled(wrapContext)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Scary Stuff",
                "icon": "Beaker",
              },
              "ref": null,
              "rendered": "Scary Stuff",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`Menu - focusOnMount 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Menu
    focusOnMount={true}
  >
    <Styled(wrapContext)>
      boo!
    </Styled(wrapContext)>
  </Menu>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Styled(Styled(Component))
        innerRef={
          Object {
            "current": null,
          }
        }
        tabIndex={-1}
        userSelect="none"
      >
        <Styled(wrapContext)>
          boo!
        </Styled(wrapContext)>
      </Styled(Styled(Component))>,
      "handlers": Object {
        "moveDown": [Function],
        "moveUp": [Function],
      },
      "keyMap": Object {
        "moveDown": "down",
        "moveUp": "up",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(wrapContext)>
          boo!
        </Styled(wrapContext)>,
        "innerRef": Object {
          "current": null,
        },
        "tabIndex": -1,
        "userSelect": "none",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "boo!",
        },
        "ref": null,
        "rendered": "boo!",
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(Styled(Component))
          innerRef={
            Object {
              "current": null,
            }
          }
          tabIndex={-1}
          userSelect="none"
        >
          <Styled(wrapContext)>
            boo!
          </Styled(wrapContext)>
        </Styled(Styled(Component))>,
        "handlers": Object {
          "moveDown": [Function],
          "moveUp": [Function],
        },
        "keyMap": Object {
          "moveDown": "down",
          "moveUp": "up",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Styled(wrapContext)>
            boo!
          </Styled(wrapContext)>,
          "innerRef": Object {
            "current": null,
          },
          "tabIndex": -1,
          "userSelect": "none",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "boo!",
          },
          "ref": null,
          "rendered": "boo!",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`Menu 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Menu>
    <Styled(wrapContext)>
      boo!
    </Styled(wrapContext)>
  </Menu>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Styled(Styled(Component))
        innerRef={
          Object {
            "current": null,
          }
        }
        tabIndex={-1}
        userSelect="none"
      >
        <Styled(wrapContext)>
          boo!
        </Styled(wrapContext)>
      </Styled(Styled(Component))>,
      "handlers": Object {
        "moveDown": [Function],
        "moveUp": [Function],
      },
      "keyMap": Object {
        "moveDown": "down",
        "moveUp": "up",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(wrapContext)>
          boo!
        </Styled(wrapContext)>,
        "innerRef": Object {
          "current": null,
        },
        "tabIndex": -1,
        "userSelect": "none",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "boo!",
        },
        "ref": null,
        "rendered": "boo!",
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Styled(Styled(Component))
          innerRef={
            Object {
              "current": null,
            }
          }
          tabIndex={-1}
          userSelect="none"
        >
          <Styled(wrapContext)>
            boo!
          </Styled(wrapContext)>
        </Styled(Styled(Component))>,
        "handlers": Object {
          "moveDown": [Function],
          "moveUp": [Function],
        },
        "keyMap": Object {
          "moveDown": "down",
          "moveUp": "up",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Styled(wrapContext)>
            boo!
          </Styled(wrapContext)>,
          "innerRef": Object {
            "current": null,
          },
          "tabIndex": -1,
          "userSelect": "none",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "boo!",
          },
          "ref": null,
          "rendered": "boo!",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
