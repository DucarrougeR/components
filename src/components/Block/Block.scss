@import '../../styles/variables';

.block {
  box-sizing: border-box;
  min-width: 0;
}


.align-center { align-self: center; }
.align-flex-start { align-self: flex-start; }
.align-flex-end { align-self: flex-end; }
.align-baseline { align-self: baseline; }


$spacing-sides: (
  a: all,
  t: top,
  b: bottom,
  l: left,
  r: right,
  lr: null,
  tb: null
);

$sizes: (xs, s, m, l, xl, 2xl, 3xl, 4xl);

//// Generate all our spacing classes
//// @param {String} $prefix - The value to prefix each class name with, in this case 'p' for padding, 'm' for margin

@mixin generate-spacing($prefix) {
  //// To store what property we are creating spacing classes for
  $prop: '';

  //// Select correct property based on prefix argument
  @if $prefix == 'p' {
    $prop: 'padding';
  } @else if $prefix == 'm' {
    $prop: 'margin';
  }

  //// Loop through each value of the $spacing-side map
  //// @returns {Rule}
  //// Each rule returned is made up of interpolated values from looping through a series of maps
  //// #{$prefix} adds a unique letter to the the front of each rule: '.p' for padding and '.m' for margin
  //// #{size} appends the unique size to the rule: '.pxs' for padding extra small and '.pl' for padding large. this also looks up the correct value in the spacing variables.
  //// #{prop} adds the property that the spacing is applied to: either 'padding: ...' or 'margin...'
  //// #{side} appends a side to the property: 'padding-left:...' or 'padding-right:...'
  @each $direction, $side in $spacing-sides {

      // Loop through each of the $size options to create a class for each
      @each $size in $sizes {
        //// If $direction is 'a', apply spacing to all sides, does not append a $side
        @if $direction == 'a' {
          .#{$prefix}#{$size} { #{$prop}: map-get($spacing, $size); }
        }
        //// If $direction is 'lr', apply spacing to the left and right sides
        //// in this loop 'lr' is being inserted in between the $prefix and $size
        @else if $direction == 'lr' {
          .#{$prefix}lr#{$size} {
            #{$prop}-left: map-get($spacing, $size);
            #{$prop}-right: map-get($spacing, $size);
          }
        }

        //// If $direction is 'tb', apply spacing the top and bottom sides
        //// in this loop 'tb' is being inserted in between the $prefix and $size
        @else if $direction == 'tb' {
          .#{$prefix}tb#{$size} {
            #{$prop}-top: map-get($spacing, $size);
            #{$prop}-bottom: map-get($spacing, $size);
          }
        }

        //// If $direction is either 'top', 'bottom', 'left', 'right', apply the spacing to the corresponding side
        //// in this loop the $direction is being inserted in between the $prefix and $size and the $side is being appended to the $prop
        @else {
          .#{$prefix}#{$direction}#{$size} { #{$prop}-#{$side}: map-get($spacing, $size); }
        }
    }
  }
}

//// Build all padding spacing classes, prefix with a 'p'
@include generate-spacing('p');
//// Build all margin spacing classes, prefix with a 'm'
@include generate-spacing('m');


$backgroundColors: (
  'space',
  'fog',
  'purple',
  'blue',
  'green',
  'yellow',
  'red'
);

@mixin generateBackgroundColors() {
  @each $color in $backgroundColors {

    .bg-#{$color} {background-color: var(--lens-color-#{$color}); }
    .bg-#{$color}400 {background-color: var(--lens-color-#{$color}-400); }
    .bg-#{$color}300 {background-color: var(--lens-color-#{$color}-300); }

    @if $color == 'fog' or $color == 'space' {
      .bg-#{$color}200 {background-color: var(--lens-color-#{$color}-200); }
    } @else {
      .bg-#{$color}600 {background-color: var(--lens-color-#{$color}-600); }
      .bg-#{$color}700 {background-color: var(--lens-color-#{$color}-700); }
    }
  }
}

@include generateBackgroundColors();

